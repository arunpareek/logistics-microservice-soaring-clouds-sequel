swagger: "2.0"
info:
  version: 1.0.0
  title: "Logistics Microservice"
  description: The API for the Logistics Microservice (in the Soaring through the Clouds - The Sequel system)
  termsOfService: http://swagger.io/terms/
  contact:
    name: Lucas Jellema
    email: lucasjellema@gmail.com
    url: https://github.com/lucasjellema/logistics-microservice-soaring-clouds-sequel
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: logistics-ms.swagger.io
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  UserSecurity:
    type: apiKey
    in: header
    name: api-key
#see https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-6-defining-security/

security:
  - UserSecurity: []   
paths:
  /shipping:
    post:
      description: Submits a new shipping to be executed by the Logistics service.  
      operationId: submit shipping
      parameters:
        - name: shipping
          in: body
          description: Shipping to add to the shipping registry
          required: true
          schema:
            $ref: '#/definitions/NewShipping'
      responses:
        200:
          description: shipping response
          schema:
            $ref: '#/definitions/Shipping'
        400:
          description: validation fault - shipping cannot be accepted
          schema:
            $ref: '#/definitions/ShippingValidation'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /shipping/validate:
    post:
      description: Validate a shipping to find out if it is acceptable - and if not, what the issues are with it (such as the combination of items and the destination country or items that are not currently in stock). Note this operation does not have any side effects
      operationId: validate shipping
      parameters:
        - name: shipping
          in: body
          description: Shipping to validate
          required: true
          schema:
            $ref: '#/definitions/NewShipping'
      responses:
        200:
          description: shipping validation response
          schema:
            $ref: '#/definitions/ShippingValidation'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /shipping/{shippingId}:
    get:
      description: Returns details of a shipping based on the shipping identifier
      operationId: find shipping details by id
      parameters:
        - name: shippingId
          in: path
          description: Identifier of the shipping to retrieve details for
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: shipping response
          schema:
            $ref: '#/definitions/Shipping'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: deletes a single shipping based on the ID supplied
      operationId: deleteShipping
      parameters:
        - name: shippingId
          in: path
          description: ID of Shipping to delete
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: Shipping deleted
        404:
          description: Shipping to be deleted was not found. 
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /shipping/{shippingId}/status:
    get:
      description: Returns status of a specific shippingbased on the shipping identifier
      operationId: retrieve shipping status by shipping id
      parameters:
        - name: shippingId
          in: path
          description: Identifier of the shipping to retrieve the current status for
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: shipping status
          schema:
            $ref: '#/definitions/StatusOfShipping'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /shipping/{shippingId}/cancel:
    post:
      description: Cancel a shipping that was placed earlier on; cancel means prevent hand over to parcel delivery partner; if that has already happened, cancel has no effect. 
      operationId: cancel shipping with shipping id
      parameters:
        - name: shippingId
          in: path
          description: Identifier of the shipping to cancel
          required: true
          type: integer
          format: int64
      responses:
        202:
          description: shipping was successfully canceled (also returned if the shpping had already been canceled before this request)
        400:
          description: Shipping cancellation result 
          schema:
            $ref: '#/definitions/CancellationResult'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /stock/{productIdentifier}:
    get:
      description: Returns stock situation for the indicated product (identifier)
      operationId: retrieve stock status for product
      parameters:
        - name: productIdentifier
          in: path
          description: Identifier of the product to retrieve the current stock situation for
          required: true
          type: string
      responses:
        200:
          description: stock status
          schema:
             $ref: '#/definitions/StockStatus'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /health:
    get:
      description: Reports on the health of the Logistics Service 
      operationId: health check
      responses:
        200:
          description: health report
          schema:
            $ref: '#/definitions/health'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Shipping:
    allOf:
      - $ref: '#/definitions/NewShipping'
      - required:
        - id
        properties:
          id:
            type: integer
            format: int64
          shippingStatus:
            $ref: '#/definitions/ShippingStatus'
          parcels:
            type: array
            items: 
              $ref: '#/definitions/Parcel'
  ShippingItem:
    allOf:
      - required:
        - productIdentifier
        - itemCount
        properties:
          productIdentifier:
            type: string
          itemCount:
            type: integer
            format: int32
  NewShipping:
    properties:
      orderIdentifier:
        type: string
      nameAddressee:
        type: string
        description: "Human readable label of the person to whom the shipping is to be sent. For example: Mr. Joseph P. Miller, Lucy Diamond"
      destination:
          $ref: '#/definitions/Destination'
      shippingMethod:
        type: string
        enum: ["premium", "economy"]
        description: premium to have items shipped as quickly as possible, economy to do cheapest shipping available
      desiredDeliveryDate:
        type: string
        format: date
        description: "for example: deliver on birthday next month, after when I return from holiday, when I am in that hotel"
      giftWrapping:
        type: boolean
      personalMessage:
        type: string
      items:
        type: array
        items: 
          $ref: '#/definitions/ShippingItem'
    required:
      - nameAddressee
      - destination
      - items
  Parcel:
    description: A shipping can be handed over to the parcel delivery service in one or more parcels. each parcel is separately delivered and can be tracked & traced
    properties:
      parcelDeliveryService:
        type: string
        description: identifier of the parcel delivery service 
      trackAndTraceIdentifier:
        type: string
        description: identifier assigned by the parcel delivery service to identify the parcel
      estimatedDeliveryData:
        type: string
        format: date
        description: "the estimated date & time of delivery of the parcel at the destination"
      parcelLogItems:
        type: array
        items: 
          $ref: '#/definitions/ParcelLogItem'
    required:
      - name

  ParcelLogItem:
    properties:
      location:
        type: string
        description: "current whereabouts of the parcel TODO - perhaps change to a geo coordinates data type"
      parcelStatus:
        type: string
        description: "indication of the status of the parcel"
        "enum": [
                  "inDepot",
                  "enRoute",
                  "delivered",
                  "lost"
                ]
      estimatedDeliveryDate:
        type: string
        format: dateTime
        description: "the estimated date & time of delivery of the parcel at the destination"

  ShippingValidation:
    properties:
      status:
        type: string
        description: "OK or NOK"
      validationFindings:
        type: array
        items: 
          $ref: '#/definitions/ValidationFinding'
  ValidationFinding:
    properties:
      findingType:
        type: string
        description: "indication of the type of finding"
        "enum": [
                  "invalidDestination",
                  "outOfStockItem"
                ]
      offendingItem:
        $ref: '#/definitions/ShippingItem'
  CancellationResult:        
    properties:
      cancellationStatus:
        type: string
        enum: ["shippingNotFound", "shippingCannotBeCancelled"]
        
  StatusOfShipping:
    properties:
      status: 
        $ref: '#/definitions/ShippingStatus'
  ShippingStatus:
    type: string
    enum: ["new", "picking","handedOverToParcelDelivery","delivered","lost","canceled"]
    description: indication of the current status of the shipping
  Destination:
    properties:
      street:
        type: string
        example: King St
      houseNumber:
        type: string
        example: 12
      postalCode:
        type: string
        example: M2 4WU
      city:
        type: string
        example: Manchester
      country:
        type: string
        example: uk
    required:
      - name
  StockStatus:
    properties:
      itemsInStock: 
        type: integer
        format: int64
  health:
    properties:
      status:
        type: string
      uptime:
        type: string
    example:
      status: OK
      uptime: 12345
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string